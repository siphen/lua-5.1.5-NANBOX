Modifications in this fork (NaNbox Extension)
---------------------------------------------
This fork of Lua 5.1 adds NaNboxing support and a complete test/benchmark setup.

- Switches & Layout
  - `LUA_NANBOX` (default ON): enables centralized accessors and the compatibility path.
  - `LUA_NANBOX_LAYOUT=1`: enables the true 8‑byte NaNboxed TValue layout.
  - `LUA_NANBOX_STRICT=1`: extra runtime checks (pointer canonicality, assumptions).
  - Little‑endian + IEEE‑754 required. Arithmetic NaNs are treated as numbers; only tagged NaNs are considered boxed values.

- Key Changes (src/)
  - `lnanbox.h`: bit layout, tagged NaN helpers, fast number check (`tv_isnumber_fast`), direct number read in layout mode.
  - `lobject.h/c`: route `ttis*`/`nvalue`/`gcvalue`/`set*` through accessors; in layout mode, `ttisnumber` fast path and `nvalue` direct access.
  - `ltable.c`: use `setobj(L, key2tval(mp), key)` for keys; runtime init of `dummynode` under layout mode.
  - `lvm.c`: arithmetic op fast path remains `ttisnumber + nvalue`, which now benefits from the new fast path.

- Build & Tests
  - `bash build.sh`: builds (release by default) and runs Lua unit tests plus C API tests.
  - Real layout: `LUA_NANBOX_LAYOUT=1 LUA_NANBOX_STRICT=1 bash build.sh`.
  - Official lua-tests (v5-1-3 submodule in `external/lua-tests`): `OFFICIAL_TESTS=1 bash build.sh`.
    - Windows/MSYS runs a stable subset; Linux/WSL/CI runs the full suite.
  - Initialize submodule once: `git submodule update --init --recursive`.

- Benchmarks & Report
  - `bash bench/bench_report.sh`: generates `bench/report.md` and injects it into `docs/NANBOX_REPORT.md`.
  - Covers table/struct‑heavy and numeric‑heavy scenarios (table_stress, luau:*, luajit:*, shootout:*).

- Notes
  - NaNbox reduces memory footprint most in data‑structure‑heavy workloads; pure numeric loops may not speed up (branching/bit checks), though the new fast path minimizes overhead.
  - Dead keys keep payload pointers (only type tag changes), matching upstream behavior for stable iteration.
  - For stricter validation, set `SAN_FLAGS` (e.g., Linux/Clang: `-fsanitize=address,undefined -fno-omit-frame-pointer`).

NaNbox Benchmark Report (excerpt)
---------------------------------
Full report is auto‑generated by `bash bench/bench_report.sh` into `bench/report.md` and injected into `docs/NANBOX_REPORT.md`.

| Benchmark | Params | Baseline Time (s) | NaNbox Time (s) | Speedup (×) | Baseline mem_no_gc (KB) | NaNbox mem_no_gc (KB) | Δ no_gc (KB) |
|---|---|---:|---:|---:|---:|---:|---:|
| table_stress | N=200000 R=200000 | 0.028 | 0.030 | 0.93 | 23256.3 | 17111.9 | -6144.4 |
| luau:table-ops | N=200000 | 0.011 | 0.014 | 0.79 | 4096.2 | 2048.2 | -2048.0 |
| luajit:mandelbrot | N=1000 | 0.761 | 0.753 | 1.01 | 16.1 | 8.1 | -8.0 |
| luajit:fannkuchredux | N=10 | 12.700 | 12.936 | 0.98 | 33.5 | 24.4 | -9.1 |
| shootout:binarytrees | N=14 | 0.718 | 0.747 | 0.96 | 17729.4 | 14069.5 | -3659.9 |
| shootout:nbody | steps=200000 | 0.464 | 0.552 | 0.84 | 0.8 | 0.4 | -0.4 |
| shootout:spectralnorm | N=100 | 0.019 | 0.021 | 0.90 | 46.2 | 23.8 | -22.4 |
| shootout:fasta | N=250000 | 0.079 | 0.109 | 0.73 | 3.1 | 2.7 | -0.4 |
| shootout:knucleotide | N=200000 | 0.025 | 0.032 | 0.78 | 4846.4 | 2797.8 | -2048.6 |
| shootout:revcomp | N=200000 | 0.027 | 0.031 | 0.87 | 5041.1 | 2992.7 | -2048.4 |


README for Lua 5.1

See INSTALL for installation instructions.
See HISTORY for a summary of changes since the last released version.

* What is Lua?
  ------------
  Lua is a powerful, light-weight programming language designed for extending
  applications. Lua is also frequently used as a general-purpose, stand-alone
  language. Lua is free software.

  For complete information, visit Lua's web site at http://www.lua.org/ .
  For an executive summary, see http://www.lua.org/about.html .

  Lua has been used in many different projects around the world.
  For a short list, see http://www.lua.org/uses.html .

* Availability
  ------------
  Lua is freely available for both academic and commercial purposes.
  See COPYRIGHT and http://www.lua.org/license.html for details.
  Lua can be downloaded at http://www.lua.org/download.html .

* Installation
  ------------
  Lua is implemented in pure ANSI C, and compiles unmodified in all known
  platforms that have an ANSI C compiler. In most Unix-like platforms, simply
  do "make" with a suitable target. See INSTALL for detailed instructions.

* Origin
  ------
  Lua is developed at Lua.org, a laboratory of the Department of Computer
  Science of PUC-Rio (the Pontifical Catholic University of Rio de Janeiro
  in Brazil).
  For more information about the authors, see http://www.lua.org/authors.html .

(end of README)
